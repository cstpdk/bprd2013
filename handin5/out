
F# Interactive for F# 3.0 (Open Source Edition)
Freely distributed under the Apache 2.0 Open Source License

For help type #help;;

[Loading /home/csp/projects/itu/5.semester/bprd/handins/handin5/MicroC/Absyn.fs
 Loading /home/csp/projects/itu/5.semester/bprd/handins/handin5/MicroC/CPar.fs
 Loading /home/csp/projects/itu/5.semester/bprd/handins/handin5/MicroC/CLex.fs
 Loading /home/csp/projects/itu/5.semester/bprd/handins/handin5/MicroC/Parse.fs
 Loading /home/csp/projects/itu/5.semester/bprd/handins/handin5/MicroC/Interp.fs
 Loading /home/csp/projects/itu/5.semester/bprd/handins/handin5/MicroC/ParseAndRun.fs]

namespace FSI_0002
  type typ =
    | TypI
    | TypC
    | TypA of typ * int option
    | TypP of typ
  and expr =
    | Access of access
    | Assign of access * expr
    | Addr of access
    | CstI of int
    | Prim1 of string * expr
    | Prim2 of string * expr * expr
    | Andalso of expr * expr
    | Orelse of expr * expr
    | Call of string * expr list
  and access =
    | AccVar of string
    | AccDeref of expr
    | AccIndex of access * expr
  and stmt =
    | If of expr * stmt * stmt
    | While of expr * stmt
    | Expr of expr
    | Return of expr option
    | Block of stmtordec list
  and stmtordec =
    | Dec of typ * string
    | Stmt of stmt
  and topdec =
    | Fundec of typ option * string * (typ * string) list * stmt
    | Vardec of typ * string
  and program = | Prog of topdec list


namespace FSI_0002
  val compose1 : f:('a -> 'b) -> g:('b -> 'c) * s:'d -> ('a -> 'c) * 'd
  val nl : Absyn.expr
  type token =
    | EOF
    | LPAR
    | RPAR
    | LBRACE
    | RBRACE
    | LBRACK
    | RBRACK
    | SEMI
    | COMMA
    | ASSIGN
    | AMP
    | NOT
    | SEQOR
    | SEQAND
    | EQ
    | NE
    | GT
    | LT
    | GE
    | LE
    | PLUS
    | MINUS
    | TIMES
    | DIV
    | MOD
    | CHAR
    | ELSE
    | IF
    | INT
    | NULL
    | PRINT
    | PRINTLN
    | RETURN
    | VOID
    | WHILE
    | CSTSTRING of string
    | NAME of string
    | CSTINT of int
    | CSTBOOL of int
  type tokenId =
    | TOKEN_EOF
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_SEMI
    | TOKEN_COMMA
    | TOKEN_ASSIGN
    | TOKEN_AMP
    | TOKEN_NOT
    | TOKEN_SEQOR
    | TOKEN_SEQAND
    | TOKEN_EQ
    | TOKEN_NE
    | TOKEN_GT
    | TOKEN_LT
    | TOKEN_GE
    | TOKEN_LE
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_MOD
    | TOKEN_CHAR
    | TOKEN_ELSE
    | TOKEN_IF
    | TOKEN_INT
    | TOKEN_NULL
    | TOKEN_PRINT
    | TOKEN_PRINTLN
    | TOKEN_RETURN
    | TOKEN_VOID
    | TOKEN_WHILE
    | TOKEN_CSTSTRING
    | TOKEN_NAME
    | TOKEN_CSTINT
    | TOKEN_CSTBOOL
    | TOKEN_end_of_input
    | TOKEN_error
  type nonTerminalId =
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_Topdecs
    | NONTERM_Topdec
    | NONTERM_Vardec
    | NONTERM_Vardesc
    | NONTERM_Fundec
    | NONTERM_Paramdecs
    | NONTERM_Paramdecs1
    | NONTERM_Block
    | NONTERM_StmtOrDecSeq
    | NONTERM_Stmt
    | NONTERM_StmtM
    | NONTERM_StmtU
    | NONTERM_Expr
    | NONTERM_ExprNotAccess
    | NONTERM_AtExprNotAccess
    | NONTERM_Access
    | NONTERM_Exprs
    | NONTERM_Exprs1
    | NONTERM_Const
    | NONTERM_Type
  val tagOfToken : t:token -> int
  val tokenTagToTokenId : tokenIdx:int -> tokenId
  val prodIdxToNonTerminal : prodIdx:int -> nonTerminalId
  val _fsyacc_endOfInputTag : int
  val _fsyacc_tagOfErrorTerminal : int
  val token_to_string : t:token -> string
  val _fsyacc_dataOfToken : t:token -> System.Object
  val _fsyacc_gotos : uint16 []
  val _fsyacc_sparseGotoTableRowOffsets : uint16 []
  val _fsyacc_stateToProdIdxsTableElements : uint16 []
  val _fsyacc_stateToProdIdxsTableRowOffsets : uint16 []
  val _fsyacc_action_rows : int
  val _fsyacc_actionTableElements : uint16 []
  val _fsyacc_actionTableRowOffsets : uint16 []
  val _fsyacc_reductionSymbolCounts : uint16 []
  val _fsyacc_productionToNonTerminalTable : uint16 []
  val _fsyacc_immediateActions : uint16 []
  val _fsyacc_reductions : unit -> (Parsing.IParseState -> obj) []
  val tables : unit -> Parsing.Tables<token>
  val engine :
    lexer:(Lexing.LexBuffer<'a> -> token) ->
      lexbuf:Lexing.LexBuffer<'a> -> startState:int -> obj
  val Main :
    lexer:(Lexing.LexBuffer<'a> -> token) ->
      lexbuf:Lexing.LexBuffer<'a> -> Absyn.program


namespace FSI_0002
  val lexemeAsString : lexbuf:Lexing.LexBuffer<char> -> string
  val keyword : s:string -> CPar.token
  val cEscape : s:string -> char
  val trans : uint16 [] array
  val actions : uint16 []
  val _fslex_tables : Lexing.UnicodeTables
  val _fslex_dummy : unit -> 'a
  val Token : lexbuf:Lexing.LexBuffer<char> -> CPar.token
  val Comment : lexbuf:Lexing.LexBuffer<char> -> unit
  val EndLineComment : lexbuf:Lexing.LexBuffer<char> -> unit
  val String : chars:char list -> lexbuf:Lexing.LexBuffer<char> -> string
  val _fslex_Token :
    _fslex_state:int -> lexbuf:Lexing.LexBuffer<char> -> CPar.token
  val _fslex_Comment :
    _fslex_state:int -> lexbuf:Lexing.LexBuffer<char> -> unit
  val _fslex_EndLineComment :
    _fslex_state:int -> lexbuf:Lexing.LexBuffer<char> -> unit
  val _fslex_String :
    chars:char list ->
      _fslex_state:int -> lexbuf:Lexing.LexBuffer<char> -> string


namespace FSI_0002
  val fromString : str:string -> Absyn.program
  val fromFile : filename:string -> Absyn.program


namespace FSI_0002
  type 'data env = (string * 'data) list
  val lookup : env:(string * 'a) list -> x:string -> 'a
  type locEnv = int env * int
  type paramdecs = (Absyn.typ * string) list
  type funEnv = (paramdecs * Absyn.stmt) env
  type gloEnv = int env * funEnv
  type address = int
  type store = Map<address,int>
  val emptyStore : Map<address,int>
  val setSto : store:store -> addr:address -> value:int -> Map<address,int>
  val getSto : store:store -> addr:address -> int
  val initSto :
    loc:address -> n:int -> store:Map<address,int> -> Map<address,int>
  val bindVar :
    x:string ->
      v:int ->
        env:(string * int) list * nextloc:int -> store:store -> locEnv * store
  val bindVars :
    xs:string list ->
      vs:int list -> int env * int -> store:store -> locEnv * store
  val allocate :
    typ:Absyn.typ * x:string ->
      env0:(string * int) list * nextloc:address ->
        sto0:Map<address,int> -> locEnv * store
  val initEnvAndStore : topdecs:Absyn.topdec list -> locEnv * funEnv * store
  val exec :
    stmt:Absyn.stmt ->
      int env * int -> int env * funEnv -> store:store -> store
  val stmtordec :
    stmtordec:Absyn.stmtordec ->
      int env * int -> int env * funEnv -> store:store -> locEnv * store
  val eval :
    e:Absyn.expr ->
      int env * int -> int env * funEnv -> store:store -> int * store
  val access :
    acc:Absyn.access ->
      int env * int -> int env * funEnv -> store:store -> address * store
  val evals :
    es:Absyn.expr list ->
      int env * int -> int env * funEnv -> store:store -> int list * store
  val callfun :
    f:string ->
      es:Absyn.expr list ->
        int env * int -> int env * funEnv -> store:store -> int * store
  val run : Absyn.program -> vs:int list -> store


namespace FSI_0002
  val fromString : (string -> Absyn.program)
  val fromFile : (string -> Absyn.program)
  val run : (Absyn.program -> int list -> Interp.store)

> > val it : Absyn.program =
  Prog
    [Fundec
       (null,"main",[(TypI, "n")],
        Block
          [Stmt
             (While
                (Prim2 (">",Access (AccVar "n"),CstI 0),
                 Block
                   [Stmt (Expr (Prim1 ("printi",Access (AccVar "n"))));
                    Stmt
                      (Expr
                         (Assign
                            (AccVar "n",Prim2 ("-",Access (AccVar "n"),CstI 1))))]));
           Stmt (Expr (Prim1 ("printc",CstI 10)))])]
> 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 
val it : Interp.store = map [(0, 0)]
> val it : Absyn.program =
  Prog
    [Fundec
       (null,"main",[(TypI, "n")],
        Block
          [Dec (TypI,"i"); Dec (TypI,"u"); Dec (TypA (TypI,Some 100),"used");
           Dec (TypA (TypI,Some 100),"diag1");
           Dec (TypA (TypI,Some 100),"diag2");
           Dec (TypA (TypI,Some 100),"col");
           Stmt (Expr (Assign (AccVar "u",CstI 1)));
           Stmt
             (While
                (Prim2 ("<=",Access (AccVar "u"),Access (AccVar "n")),
                 Block
                   [Stmt
                      (Expr
                         (Assign
                            (AccIndex (AccVar "used",Access (AccVar "u")),
                             CstI 0)));
                    Stmt
                      (Expr
                         (Assign
                            (AccVar "u",Prim2 ("+",Access (AccVar "u"),CstI 1))))]));
           Stmt (Expr (Assign (AccVar "u",CstI 1)));
           Stmt
             (While
                (Prim2
                   ("<=",Access (AccVar "u"),
                    Prim2 ("*",CstI 2,Access (AccVar "n"))),
                 Block
                   [Stmt
                      (Expr
                         (Assign
                            (AccIndex (AccVar "diag1",Access (AccVar "u")),
                             Assign
                               (AccIndex (AccVar "diag2",Access (AccVar "u")),
                                CstI 0))));
                    Stmt
                      (Expr
                         (Assign
                            (AccVar "u",Prim2 ("+",Access (AccVar "u"),CstI 1))))]));
           Stmt (Expr (Assign (AccVar "i",Assign (AccVar "u",CstI 1))));
           Stmt
             (While
                (Prim2 (">",Access (AccVar "i"),CstI 0),
                 Block
                   [Stmt
                      (While
                         (Andalso
                            (Prim2
                               ("<=",Access (AccVar "i"),Access (AccVar "n")),
                             Prim2 ("!=",Access (AccVar "i"),CstI 0)),
                          Block
                            [Stmt
                               (While
                                  (Andalso
                                     (Prim2
                                        ("<=",Access (AccVar "u"),
                                         Access (AccVar "n")),
                                      Orelse
                                        (Orelse
                                           (Access
                                              (AccIndex
                                                 (AccVar "used",
                                                  Access (AccVar "u"))),
                                            Access
                                              (AccIndex
                                                 (AccVar "diag1",
                                                  Prim2
                                                    ("+",
                                                     Prim2
                                                       ("-",
                                                        Access (AccVar "u"),
                                                        Access (AccVar "i")),
                                                     Access (AccVar "n"))))),
                                         Access
                                           (AccIndex
                                              (AccVar "diag2",
                                               Prim2
                                                 ("+",Access (AccVar "u"),
                                                  Access (AccVar "i")))))),
                                   Expr
                                     (Assign
                                        (AccVar "u",
                                         Prim2
                                           ("+",Access (AccVar "u"),CstI 1)))));
                             Stmt
                               (If
                                  (Prim2
                                     ("<=",Access (AccVar "u"),
                                      Access (AccVar "n")),
                                   Block
                                     [Stmt
                                        (Expr
                                           (Assign
                                              (AccIndex
                                                 (AccVar "col",
                                                  Access (AccVar "i")),
                                               Access (AccVar "u"))));
                                      Stmt
                                        (Expr
                                           (Assign
                                              (AccIndex
                                                 (AccVar "used",
                                                  Access (AccVar "u")),
                                               Assign
                                                 (AccIndex
                                                    (AccVar "diag1",
                                                     Prim2
                                                       ("+",
                                                        Prim2
                                                          ("-",
                                                           Access (AccVar "u"),
                                                           Access (AccVar "i")),
                                                        Access (AccVar "n"))),
                                                  Assign
                                                    (AccIndex
                                                       (AccVar "diag2",
                                                        Prim2
                                                          ("+",
                                                           Access (AccVar "u"),
                                                           Access (AccVar "i"))),
                                                     CstI 1)))));
                                      Stmt
                                        (Expr
                                           (Assign
                                              (AccVar "i",
                                               Prim2
                                                 ("+",Access (AccVar "i"),
                                                  CstI 1))));
                                      Stmt (Expr (Assign (AccVar "u",CstI 1)))],
                                   Block
                                     [Stmt
                                        (Expr
                                           (Assign
                                              (AccVar "i",
                                               Prim2
                                                 ("-",Access (AccVar "i"),
                                                  CstI 1))));
                                      Stmt
                                        (If
                                           (Prim2
                                              (">",Access (AccVar "i"),CstI 0),
                                            Block
                                              [Stmt
                                                 (Expr
                                                    (Assign
                                                       (AccVar "u",
                                                        Access
                                                          (AccIndex
                                                             (AccVar "col",
                                                              Access
                                                                (AccVar "i"))))));
                                               Stmt
                                                 (Expr
                                                    (Assign
                                                       (AccIndex
                                                          (AccVar "used",
                                                           Access (AccVar "u")),
                                                        Assign
                                                          (AccIndex
                                                             (AccVar "diag1",
                                                              Prim2
                                                                ("+",
                                                                 Prim2
                                                                   ("-",
                                                                    Access
                                                                      (AccVar
                                                                         "u"),
                                                                    Access
                                                                      (AccVar
                                                                         "i")),
                                                                 Access
                                                                   (AccVar "n"))),
                                                           Assign
                                                             (AccIndex
                                                                (AccVar
                                                                   "diag2",
                                                                 Prim2
                                                                   ("+",
                                                                    Access
                                                                      (AccVar
                                                                         "u"),
                                                                    Access
                                                                      (AccVar
                                                                         "i"))),
                                                              CstI 0)))));
                                               Stmt
                                                 (Expr
                                                    (Assign
                                                       (AccVar "u",
                                                        Prim2
                                                          ("+",
                                                           Access (AccVar "u"),
                                                           CstI 1))))],
                                            Block []))]))]));
                    Stmt
                      (If
                         (Prim2 (">",Access (AccVar "i"),Access (AccVar "n")),
                          Block
                            [Dec (TypI,"j");
                             Stmt (Expr (Assign (AccVar "j",CstI 1)));
                             Stmt
                               (While
                                  (Prim2
                                     ("<=",Access (AccVar "j"),
                                      Access (AccVar "n")),
                                   Block
                                     [Stmt
                                        (Expr
                                           (Prim1
                                              ("printi",
                                               Access
                                                 (AccIndex
                                                    (AccVar "col",
                                                     Access (AccVar "j"))))));
                                      Stmt
                                        (Expr
                                           (Assign
                                              (AccVar "j",
                                               Prim2
                                                 ("+",Access (AccVar "j"),
                                                  CstI 1))))]));
                             Stmt (Expr (Prim1 ("printc",CstI 10)));
                             Stmt
                               (Expr
                                  (Assign
                                     (AccVar "i",
                                      Prim2 ("-",Access (AccVar "i"),CstI 1))));
                             Stmt
                               (If
                                  (Prim2 (">",Access (AccVar "i"),CstI 0),
                                   Block
                                     [Stmt
                                        (Expr
                                           (Assign
                                              (AccVar "u",
                                               Access
                                                 (AccIndex
                                                    (AccVar "col",
                                                     Access (AccVar "i"))))));
                                      Stmt
                                        (Expr
                                           (Assign
                                              (AccIndex
                                                 (AccVar "used",
                                                  Access (AccVar "u")),
                                               Assign
                                                 (AccIndex
                                                    (AccVar "diag1",
                                                     Prim2
                                                       ("+",
                                                        Prim2
                                                          ("-",
                                                           Access (AccVar "u"),
                                                           Access (AccVar "i")),
                                                        Access (AccVar "n"))),
                                                  Assign
                                                    (AccIndex
                                                       (AccVar "diag2",
                                                        Prim2
                                                          ("+",
                                                           Access (AccVar "u"),
                                                           Access (AccVar "i"))),
                                                     CstI 0)))));
                                      Stmt
                                        (Expr
                                           (Assign
                                              (AccVar "u",
                                               Prim2
                                                 ("+",Access (AccVar "u"),
                                                  CstI 1))))],Block []))],
                          Block []))]))])]
> 1 5 8 6 3 7 2 4 
1 6 8 3 7 4 2 5 
1 7 4 6 8 2 5 3 
1 7 5 8 2 4 6 3 
2 4 6 8 3 1 7 5 
2 5 7 1 3 8 6 4 
2 5 7 4 1 8 6 3 
2 6 1 7 4 8 3 5 
2 6 8 3 1 4 7 5 
2 7 3 6 8 5 1 4 
2 7 5 8 1 4 6 3 
2 8 6 1 3 5 7 4 
3 1 7 5 8 2 4 6 
3 5 2 8 1 7 4 6 
3 5 2 8 6 4 7 1 
3 5 7 1 4 2 8 6 
3 5 8 4 1 7 2 6 
3 6 2 5 8 1 7 4 
3 6 2 7 1 4 8 5 
3 6 2 7 5 1 8 4 
3 6 4 1 8 5 7 2 
3 6 4 2 8 5 7 1 
3 6 8 1 4 7 5 2 
3 6 8 1 5 7 2 4 
3 6 8 2 4 1 7 5 
3 7 2 8 5 1 4 6 
3 7 2 8 6 4 1 5 
3 8 4 7 1 6 2 5 
4 1 5 8 2 7 3 6 
4 1 5 8 6 3 7 2 
4 2 5 8 6 1 3 7 
4 2 7 3 6 8 1 5 
4 2 7 3 6 8 5 1 
4 2 7 5 1 8 6 3 
4 2 8 5 7 1 3 6 
4 2 8 6 1 3 5 7 
4 6 1 5 2 8 3 7 
4 6 8 2 7 1 3 5 
4 6 8 3 1 7 5 2 
4 7 1 8 5 2 6 3 
4 7 3 8 2 5 1 6 
4 7 5 2 6 1 3 8 
4 7 5 3 1 6 8 2 
4 8 1 3 6 2 7 5 
4 8 1 5 7 2 6 3 
4 8 5 3 1 7 2 6 
5 1 4 6 8 2 7 3 
5 1 8 4 2 7 3 6 
5 1 8 6 3 7 2 4 
5 2 4 6 8 3 1 7 
5 2 4 7 3 8 6 1 
5 2 6 1 7 4 8 3 
5 2 8 1 4 7 3 6 
5 3 1 6 8 2 4 7 
5 3 1 7 2 8 6 4 
5 3 8 4 7 1 6 2 
5 7 1 3 8 6 4 2 
5 7 1 4 2 8 6 3 
5 7 2 4 8 1 3 6 
5 7 2 6 3 1 4 8 
5 7 2 6 3 1 8 4 
5 7 4 1 3 8 6 2 
5 8 4 1 3 6 2 7 
5 8 4 1 7 2 6 3 
6 1 5 2 8 3 7 4 
6 2 7 1 3 5 8 4 
6 2 7 1 4 8 5 3 
6 3 1 7 5 8 2 4 
6 3 1 8 4 2 7 5 
6 3 1 8 5 2 4 7 
6 3 5 7 1 4 2 8 
6 3 5 8 1 4 2 7 
6 3 7 2 4 8 1 5 
6 3 7 2 8 5 1 4 
6 3 7 4 1 8 2 5 
6 4 1 5 8 2 7 3 
6 4 2 8 5 7 1 3 
6 4 7 1 3 5 2 8 
6 4 7 1 8 2 5 3 
6 8 2 4 1 7 5 3 
7 1 3 8 6 4 2 5 
7 2 4 1 8 5 3 6 
7 2 6 3 1 4 8 5 
7 3 1 6 8 5 2 4 
7 3 8 2 5 1 6 4 
7 4 2 5 8 1 3 6 
7 4 2 8 6 1 3 5 
7 5 3 1 6 8 2 4 
8 2 4 1 7 5 3 6 
8 2 5 3 1 7 4 6 
8 3 1 6 2 5 7 4 
8 4 1 3 6 2 7 5 
val it : Interp.store =
  map
    [(0, 8); (1, 0); (2, 9); (3, -999); (4, 0); (5, 0); (6, 0); (7, 0); (8, 0);
     ...]
> Segmentation fault (core dumped)
