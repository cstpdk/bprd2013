Symbolic bytecode for ex8:
    LDARGS; CALL (0,"L1"); STOP; Label "L1"; INCSP 1; GETBP; CSTI 0; ADD;
    CSTI 20000000; STI; INCSP -1; GOTO "L3"; Label "L2"; GETBP; CSTI 0; ADD;
    GETBP; CSTI 0; ADD; LDI; CSTI 1; SUB; STI; INCSP -1; INCSP 0; Label "L3";
    GETBP; CSTI 0; ADD; LDI; IFNZRO "L2"; INCSP -1; RET -1]

Integer bytecode fpr ex8:
    24 19 0 5 25 15 1 13 0 0 1 0 20000000 12 15 -1 16 35 13 0 0 1 13 0 0 1 11 0 1 2 12 15 -1 15 0 13 0 0 1 11 18 18 15 -1 21 -1

Compared to the handwritten:
    0 20000000 16 7 0 1 2 9 18 4 25

Benchmarked:
    $ time java -cp MicroC/ Machine ex8.c.out && time java -cp MicroC/ Machine MicroC/prog1

    Ran 1.89 seconds

    real    0m1.953s
    user    0m1.960s
    sys     0m0.012s

    Ran 0.387 seconds

    real    0m0.445s
    user    0m0.456s
    sys     0m0.012s

Explanation:
    The severe performance penalty is probably due to several variable access (11) and many unnecessary calls to stack point in- and decrement
